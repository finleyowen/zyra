// we'll use this class declaration to demonstrate some syntactic sugars
class MyClass;

// =================
// memory management
// =================

// objects are stored as shared pointers by default
MyClass myObj1;

// primitive types are *not* stored as pointers by default
int myInt1;

// smart pointer syntax
shr MyClass myObj2; // 'shr' is optional here since it is the default
unq MyClass myObj3;
wk MyClass myObj4;

// can also make smart pointers of primitive types - just not by default
shr int myInt2;

// manual memory management syntax
mnl MyClass myObj5; // not a pointer
mnl MyClass *myObj6;
mnl MyClass *const myObj7;
mnl MyClass **const *const **const myObj8;

// ==========
// mutability
// ==========

// Zyra has two keywords for managing mutability, 'const' and 'immut'.
// immut refers to the object's mutability, const refers to the pointer's
// mutability.
// the 'immut' keyword cannot be used with the 'mnl' keyword.
const MyClass myObj9; // constant pointer to a mutable object
immut MyClass myObj10; // mutable pointer to a constant object
const immut MyClass myObj11; // constant pointer to a constant object
