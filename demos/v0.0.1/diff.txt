                                                                              > #include <memory>
                                                                              >
// we'll use this class declaration to demonstrate some syntactic sugars        // we'll use this class declaration to demonstrate some syntactic sugars
class MyClass;                                                                  class MyClass;

// =================                                                            // =================
// memory management                                                            // memory management
// =================                                                            // =================

// objects are stored as shared pointers by default                             // objects are stored as shared pointers by default
MyClass myObj;                                                                | std::shared_ptr<MyClass> myObj; 

// primitive types are *not* stored as pointers by default                      // primitive types are *not* stored as pointers by default
int myInt;                                                                      int myInt; 

// smart pointer syntax                                                         // smart pointer syntax
shr MyClass myObj; // 'shr' is optional here since it is the default          | std::shared_ptr<MyClass> myObj; // 'shr' is optional here since it is the def
unq MyClass myObj;                                                            | std::unique_ptr<MyClass> myObj; 
wk MyClass myObj;                                                             | std::weak_ptr<MyClass> myObj; 

// can also make smart pointers of primitive types - just not by default        // can also make smart pointers of primitive types - just not by default
shr int myInt;                                                                | std::shared_ptr<int> myInt; 

// manual memory management syntax                                              // manual memory management syntax
mnl MyClass myObj; // not a pointer                                           | MyClass myObj; // not a pointer
mnl MyClass *myObj;                                                           | MyClass * myObj; 
mnl MyClass *const myObj;                                                     | MyClass *const myObj; 
mnl MyClass **const *const **const myObj;                                     | MyClass **const*const**const myObj; 

// ==========                                                                   // ==========
// mutability                                                                   // mutability
// ==========                                                                   // ==========

// Zyra has two keywords for managing mutability, 'const' and 'immut'.          // Zyra has two keywords for managing mutability, 'const' and 'immut'.
// immut refers to the object's mutability, const refers to the pointer's       // immut refers to the object's mutability, const refers to the pointer's
// mutability.                                                                  // mutability.
// the 'immut' keyword cannot be used with the 'mnl' keyword.                   // the 'immut' keyword cannot be used with the 'mnl' keyword.
const MyClass myObj; // constant pointer to a mutable object                  | const std::shared_ptr<MyClass> myObj; // constant pointer to a mutable object
immut MyClass myObj; // mutable pointer to a constant object                  | std::shared_ptr<const MyClass> myObj; // mutable pointer to a constant object
const immut MyClass myObj; // constant pointer to a constant object           | const std::shared_ptr<const MyClass> myObj; // constant pointer to a constant
